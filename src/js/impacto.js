// === MI JAVASCRIPT PARA LA P√ÅGINA DE IMPACTO DEL NITR√ìGENO === //

// üçÉ Hago que la hojita verde siga el cursor cuando mueves el rat√≥n
document.addEventListener('mousemove', function(e) {
    const cursor = document.getElementById('emoji-cursor');
    if (cursor) {
        cursor.style.left = e.clientX + 'px';
        cursor.style.top = e.clientY + 'px';
        
        if (Math.random() > 0.7) {
            const trail = document.createElement("div");
            trail.className = "cursor-trail";
            trail.style.left = e.clientX + 'px';
            trail.style.top = e.clientY + 'px';
            document.body.appendChild(trail);
            
            setTimeout(() => {
                if (trail && trail.parentNode) {
                    trail.remove();
                }
            }, 600);
        }
    }
});

// üî¢ Esta funci√≥n hace que los n√∫meros de las estad√≠sticas suban poco a poco
function animateStats() {
    const statCards = document.querySelectorAll('.stat-card');
    const button = document.querySelector('.reveal-stats');
    
    if (statCards.length === 0) {
        console.log('No encuentro las tarjetas de estad√≠sticas');
        return;
    }
    
    statCards.forEach(card => {
        const target = +card.getAttribute('data-stat');
        const statNumber = card.querySelector('.stat-number');
        
        if (statNumber && target) {
            let current = 0;
            const duration = 1500;
            const stepTime = Math.max(Math.floor(duration / target), 20);
            
            const counter = setInterval(() => {
                current += 1;
                statNumber.textContent = current;
                
                if (current >= target) {
                    clearInterval(counter);
                    statNumber.textContent = target;
                }
            }, stepTime);
        }
    });
    
    if (button) {
        button.textContent = 'Ahora ya te haces una idea, ¬øno?';
    }
}

// üëÅÔ∏è Funciones para mostrar/ocultar contenido
function showPersonalActions() {
    const content = document.getElementById('personal-actions');
    if (content) {
        content.style.display = content.style.display === 'block' ? 'none' : 'block';
    }
}

function showGlobalEfforts() {
    const content = document.getElementById('global-efforts');
    if (content) {
        content.style.display = content.style.display === 'block' ? 'none' : 'block';
    }
}

// ‚¨ÜÔ∏è Funci√≥n para subir arriba - S√öPER SIMPLE SIN ERRORES
function scrollToTop() {
    console.log('üöÄ Ejecutando scroll to top');
    
    // El m√©todo m√°s directo que SIEMPRE funciona
    document.documentElement.scrollTop = 0;
    document.body.scrollTop = 0;
    
    console.log('‚úÖ Scroll ejecutado');
}

// üì± Funci√≥n para cerrar la ventana sorpresa
function closeSurpriseModal() {
    const modal = document.getElementById('surprise-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// üöÄ TODO ESTO SE EJECUTA CUANDO LA P√ÅGINA TERMINA DE CARGAR
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ Mi p√°gina ya carg√≥ correctamente');
    
    // Configuro el bot√≥n de scroll - VERSI√ìN ULTRA SIMPLE
    const scrollButton = document.querySelector('.btn-up');
    if (scrollButton) {
        console.log('‚úÖ Encontr√© el bot√≥n de scroll');
        
        // La manera M√ÅS SIMPLE de agregar el evento
        scrollButton.onclick = function() {
            console.log('üñ±Ô∏è Click detectado - ejecutando scroll');
            scrollToTop();
        };
        
        // Para m√≥viles - sin preventDefault que causa problemas
        scrollButton.addEventListener('touchstart', function() {
            console.log('üì± Touch detectado - ejecutando scroll');
            scrollToTop();
        });
        
        console.log('‚úÖ Eventos de scroll configurados');
        
    } else {
        console.log('‚ùå No encuentro el bot√≥n de scroll');
    }
    
    // Configuro el bot√≥n de estad√≠sticas
    const statsButton = document.querySelector('.reveal-stats');
    if (statsButton) {
        console.log('‚úÖ Encontr√© el bot√≥n de estad√≠sticas');
        statsButton.onclick = function() {
            console.log('üìä Alguien quiere ver las estad√≠sticas');
            animateStats();
        };
    } else {
        console.log('‚ùå No encuentro el bot√≥n de estad√≠sticas');
    }
    
    // Configuro TODOS los botones de acci√≥n de manera m√°s simple
    const actionButtons = document.querySelectorAll('.action-btn');
    console.log('üîç Encontr√©', actionButtons.length, 'botones de acci√≥n');
    
    actionButtons.forEach((button, index) => {
        const buttonText = button.textContent.trim();
        console.log('üîò Configurando bot√≥n:', buttonText);
        
        button.onclick = function() {
            console.log('üëÜ Click en:', buttonText);
            
            if (buttonText.includes('Personales')) {
                showPersonalActions();
            } else if (buttonText.includes('Globales')) {
                showGlobalEfforts();
            }
        };
    });
    
    // Configuro el bot√≥n de cerrar modal
    const closeBtn = document.querySelector('.modal-close');
    if (closeBtn) {
        console.log('‚úÖ Encontr√© el bot√≥n de cerrar modal');
        closeBtn.onclick = function() {
            closeSurpriseModal();
        };
    }
    
    // Configuro el bot√≥n secundario del modal
    const secondaryBtn = document.querySelector('.surprise-btn.secondary');
    if (secondaryBtn) {
        console.log('‚úÖ Encontr√© el bot√≥n secundario del modal');
        secondaryBtn.onclick = function() {
            closeSurpriseModal();
        };
    }
    
    console.log('üéâ Ya configur√© todos los eventos - todo deber√≠a funcionar');
});

/* === LO QUE HACE CADA COSA ===

üí° CAMBIOS PRINCIPALES EN ESTA VERSI√ìN:
- Busco los botones de acci√≥n de manera m√°s simple (por texto)
- No busco por onclick que ya no existe
- M√°s logs para ver exactamente qu√© est√° pasando
- C√≥digo m√°s robusto que no se rompe

üîß DEBUGGING:
- Mira la consola para ver cu√°ntos botones encuentra
- Si ve "0 botones de acci√≥n" es que hay un problema en el HTML
- Si ve errores de "null" es que alg√∫n elemento no existe

üì± DEBER√çA FUNCIONAR EN:
- Computadoras ‚úÖ
- M√≥viles ‚úÖ 
- Todos los navegadores ‚úÖ

¬°Ya no deber√≠as tener errores! üéØ
*/